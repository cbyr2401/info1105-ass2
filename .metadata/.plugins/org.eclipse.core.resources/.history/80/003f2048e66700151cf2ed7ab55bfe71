import java.util.ArrayList;
import java.util.List;

public class HashMap<K extends Comparable<K>, V> {
	private ArrayList<HashMapNode<K,V>> map;
	private int hashMul;
	private int hashMod;
	
	
	// construct a HashMap with 4000 places and given hash parameters
	public HashMap(int multiplier, int modulus){
		this.map = new ArrayList<>(4000);
		this.hashMod = modulus;
		this.hashMul = multiplier;
		
	}
	// construct a HashMap with given capacity and given hash parameters
	public HashMap(int hashMapSize, int multiplier, int modulus){
		this.map = new ArrayList<>(hashMapSize);
		this.hashMod = modulus;
		this.hashMul = multiplier;
	}
	// hashing
	public int hash(K key){
		return this.hashMul * Math.abs(hashCode(key)) % this.hashMod;
	}
	// size (return the number of nodes currently stored in the map)
	public int size(){
		return this.map.size();
	}
	public boolean isEmpty(){
		return size()==0;
	}
	// interface methods
	public List<K> keys(){
		List<K> myList= new ArrayList<K>();
		for (int i=0; i<map.size(); i++){
			if (map.get(i)!=null){
				
			}
			
		}
		return myList;
	}
	public V put(K key, V value){
		int index= hash(key);
		if (map.get(index)!=null){
			V temp=map.get(index).getValue();
			map.get(index).setValue(value);
			return temp;
		}
		else {
			
		}
	}
	
	
	// Gets the hash index, then either returns the value at this index from the map or returns null.
	public V get(K key){
		int index= hash(key);
		if (map.get(index)==null){
			return null;
		}
		else return map.get(index).getValue();
	}
	public V remove(K key){
		return null; 
	}

}